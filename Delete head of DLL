class ListNode:
    def __init__(self, data1=0, next1=None, prev1=None):
        self.val = data1
        self.next = next1
        self.prev = prev1

# Solution class
class Solution:
    # Function to delete the head of the doubly linked list
    def deleteHead(self, head):
        if head is None or head.next is None:
            return None  # Return None if list is empty or has one node
        
        # Store current head as 'prev'
        prev = head
        # Move 'head' to next node
        head = head.next

        # Set 'prev' pointer
        head.prev = None

        # Set 'next' pointer
        prev.next = None

        # Return new head
        return head

# Helper Function to convert an array to a doubly linked list
def arrayToLinkedList(nums):
    # If array is empty, return None
    if not nums:
        return None

    # Create head node with first element of the array
    head = ListNode(nums[0])
    prev = head

    for i in range(1, len(nums)):
        temp = ListNode(nums[i], None, prev)
        prev.next = temp
        prev = temp
    return head

def printLL(head):
    while head is not None:
        print(head.val, end=" ")
        head = head.next
    print()

if __name__ == "__main__":
    nums = [1, 2, 3, 4, 5]
    head = arrayToLinkedList(nums)

    print("Original List: ", end="")
    printLL(head)
    sol = Solution()

    head = sol.deleteHead(head)


    print("Modified list: ", end="")
    printLL(head)
