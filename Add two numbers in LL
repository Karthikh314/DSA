# Definition of Singly Linked List
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    # Function to add two numbers as linked list
    def addTwoNumbers(self, l1, l2):
        # Dummy node to act as the 
        # starting point of the result list
        dummy = ListNode()
        # Temp pointer to build 
        # the result list
        temp = dummy
        # Initialize carry
        carry = 0

        # Iterate while there are nodes in l1 or l2, 
        # or there's a carry to process
        while l1 or l2 or carry:
            sum = 0

            # Add the value from l1 
            # if available
            if l1:
                sum += l1.val
                l1 = l1.next

            # Add the value from l2 
            # if available
            if l2:
                sum += l2.val
                l2 = l2.next

            # Add the carry
            sum += carry
            # Update the carry
            carry = sum // 10

            # Create a new node with the digit value 
            # and attach it to the result list
            node = ListNode(sum % 10)
            temp.next = node
            # Move to the 
            # next position in the result list
            temp = temp.next

        # Return the result list
        # skipping the dummy node
        return dummy.next

# Function to print the linked list
def printList(head):
    while head:
        print(head.val, end=" ")
        head = head.next
    print()

if __name__ == "__main__":
    # Manual creation of linked list
    l1 = ListNode(2, ListNode(4, ListNode(3)))
    l2 = ListNode(5, ListNode(6, ListNode(4)))

    # Instance of solution class
    solution = Solution()
    result = solution.addTwoNumbers(l1, l2)

    # Print the result
    printList(result)
