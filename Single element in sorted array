
      {linear search}
class Solution:
def singleNonDuplicate(self, nums):
        n = len(nums)  # Size of the array.
        if n == 1:
            return nums[0]

        for i in range(n):
            if i == 0:
                if nums[i] != nums[i + 1]:
                    return nums[i]
            elif i == n - 1:
                if nums[i] != nums[i - 1]:
                    return nums[i]
            else:
                if nums[i] != nums[i - 1] and nums[i] != nums[i + 1]:
                    return nums[i]
        return -1

if __name__ == "__main__":
    nums = [1, 1, 2, 2, 3, 3, 4]
    sol = Solution()
    ans = sol.singleNonDuplicate(nums)
    print("The single element is:", ans)

      {binary search}
class Solution:
    def singleNonDuplicate(self, nums):
        n = len(nums) # Size of the array.
        if n == 1:
            return nums[0]
        if nums[0] != nums[1]:
            return nums[0]
        if nums[n - 1] != nums[n - 2]:
            return nums[n - 1]

        low, high = 1, n - 2
        while low <= high:
            mid = (low + high) // 2

            # If nums[mid] is the single element:
            if nums[mid] != nums[mid + 1] and nums[mid] != nums[mid - 1]:
                return nums[mid]

            # We are in the left part:
            if (mid % 2 == 1 and nums[mid] == nums[mid - 1]) or (mid % 2 == 0 and nums[mid] == nums[mid + 1]):
                # Eliminate the left half:
                low = mid + 1
            # We are in the right part:
            else:
                # Eliminate the right half:
                high = mid - 1

        return -1

nums = [1, 1, 2, 2, 3, 3, 4]
sol = Solution()

ans = sol.singleNonDuplicate(nums)

print(f"The single element is: {ans}")



