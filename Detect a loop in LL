# Definition of singly linked list:
 class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next

class Solution:
    # Function to detect a loop in the linked list
    def hasCycle(self, head):
        # Initialize a pointer 'temp'
        # At the head of the linked list
        temp = head  

        # Create a set to keep track of
        # Encountered nodes
        nodeSet = set()  

        # Traverse the linked list
        while temp is not None:
            # If the node is already in the
            # Set, there is a loop
            if temp in nodeSet:
                return True
            # Store the current node
            # In the set
            nodeSet.add(temp)
            
            # Move to the next node
            temp = temp.next  

        # If the list is successfully traversed 
        # Without a loop, return False
        return False

# Function to print the linked list
def printLinkedList(head):
    temp = head
    # Traverse the linked list and print each node's value
    while temp is not None:
        print(temp.val, end=" ")
        temp = temp.next
    print()

def main():
    # Create a sample linked list
    # With a loop for testing
    
    head = ListNode(1)
    second = ListNode(2)
    third = ListNode(3)
    fourth = ListNode(4)
    fifth = ListNode(5)

    head.next = second
    second.next = third
    third.next = fourth
    fourth.next = fifth
    # Create a loop
    fifth.next = third 

    sol = Solution()
    # Check if there is a loop 
    # In the linked list
    if sol.hasCycle(head):
        print("Loop detected in the linked list.")
    else:
        print("No loop detected in the linked list.")

if __name__ == "__main__":
    main()
